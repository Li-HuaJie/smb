<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--启动spring的一些annotation-->
    <!--<context:annotation-config />-->

    <!--自动扫描该包，使springMVC认为包下用了@controller注解的类是控制器-->
    <!--<context:component-scan base-package="com.smeroller">-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->

    <!--①：对com.stemCell包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能-->
    <context:component-scan base-package="com.smb" />
    <!-- 配置注解驱动  可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven />
        <!--<mvc:message-converters>-->
            <!--<bean class="org.springframework.http.converter.StringHttpMessageConverter">-->
                <!--<constructor-arg value="UTF-8"/>-->
            <!--</bean>-->
        <!--</mvc:message-converters>-->
    <!--</mvc:annotation-driven>-->

    <!--拦截器-->
    <mvc:interceptors>
        <!-- 国际化操作拦截器  如果采用基于(请求/Session/Cookie)则必须配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <!-- 异常拦截器 -->
        <bean class="com.smb.interceptor.ExceptionInterceptor" />
    </mvc:interceptors>

    <!--HandlerMapping无需配置，springmvc可以默认启动（静态资源访问）-->
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/jquery-easyui-1.7.0/**" location="/js/jquery-easyui-1.7.0/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/image/**" location="/image/"/>

    <!--项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议直接把静态资源放在webapp的statics下，如下-->
    <!--<mvc:resources mapping="/css/**" location="/statics/css/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/statics/js/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/statics/image/"/>-->

    <!--②：启动SpringMVC的注解功能，完成请求和注解POJO的映射-->
    <!--在spring3.1之前使用org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter注解适配器。-->
    <!--在spring3.1之后使用org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter注解适配器-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹，则最后的斜杆不要漏了)使用jsp-->
    <!--默认的视图解析器  在上边的解析错误时使用（默认使用html）-->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/view/" /><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp" />
    </bean>

    <!--配置dbcp数据库连接池（不可用）-->
    <!--<context:property-placeholder location="classpath:db.properties"/>-->
    <!--数据库配置-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--<property name="location">-->
            <!--<list value-type="org.springframework.core.io.Resource">-->
                <!--<value>classpath:jdbc.properties</value>-->
            <!--</list>-->
        <!--</property>-->
        <property name="properties" ref="appProperties" />
    </bean>
    <bean id="appProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="singleton" value="true" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <!-- 注意:后面文件中定义的属性将覆盖属性定义了较早的文件，以防键重叠。
            因此，确保最特定的文件是给定位置列表中的最后一个文件。 -->
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!--数据库连接池-->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="100"/>
        <property name="maxIdle" value="5"/>
        <property name="maxWait" value="80000"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置会话工厂SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>-->
        <property name="mapperLocations" value="classpath*:com/smb/mybatis/*.xml"/>
        <property name="typeAliasesPackage" value="com.smb.entity"/>
    </bean>

    <!--在Spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定扫描包的路径，就是mapper接口的路径，多个包中间以半角逗号隔开-->
        <property name="basePackage" value="com.smb.mapper"/>
        <!--配置sqlSessionFactoryBeanName-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

</beans>